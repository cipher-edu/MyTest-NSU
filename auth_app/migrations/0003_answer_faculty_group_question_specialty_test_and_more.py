# Generated by Django 4.2.20 on 2025-07-04 09:44

import auth_app.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth_app', '0002_remove_question_test_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=1000, verbose_name='Javob matni')),
                ('is_correct', models.BooleanField(default=False, help_text="Ushbu javob to'g'riligini belgilang.", verbose_name="To'g'ri javob")),
            ],
            options={
                'verbose_name': 'Javob varianti',
                'verbose_name_plural': 'Javob variantlari',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='Fakultet ID (API)')),
                ('name', models.CharField(max_length=255, verbose_name='Fakultet nomi')),
            ],
            options={
                'verbose_name': "Fakultet (ma'lumotnoma)",
                'verbose_name_plural': "Fakultetlar (ma'lumotnoma)",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='Guruh ID (API)')),
                ('name', models.CharField(max_length=100, verbose_name='Guruh nomi')),
            ],
            options={
                'verbose_name': "Guruh (ma'lumotnoma)",
                'verbose_name_plural': "Guruhlar (ma'lumotnoma)",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Savol matni')),
                ('question_type', models.CharField(choices=[('single', "Bitta to'g'ri javob")], default='single', max_length=10, verbose_name='Savol turi')),
                ('points', models.PositiveSmallIntegerField(default=1, help_text="Ushbu savolga to'g'ri javob uchun beriladigan ball.", verbose_name='Savol uchun ball')),
                ('order', models.PositiveIntegerField(default=0, help_text="Savollarni saralash uchun (agar aralashtirish o'chirilgan bo'lsa).", verbose_name='Tartib raqami')),
            ],
            options={
                'verbose_name': 'Savol',
                'verbose_name_plural': 'Savollar',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Mutaxassislik ID (API)')),
                ('name', models.CharField(max_length=255, verbose_name='Mutaxassislik nomi')),
            ],
            options={
                'verbose_name': "Yo'nalish (ma'lumotnoma)",
                'verbose_name_plural': "Yo'nalishlar (ma'lumotnoma)",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Talabalarga ko'rinadigan test sarlavhasi.", max_length=255, verbose_name='Test nomi')),
                ('description', models.TextField(blank=True, help_text="Test haqida qo'shimcha ma'lumot (ixtiyoriy).", null=True, verbose_name='Test tavsifi')),
                ('time_limit', models.PositiveIntegerField(default=30, help_text='Testni ishlash uchun ajratilgan vaqt. 0 - cheklanmagan.', verbose_name='Vaqt cheklovi (daqiqa)')),
                ('start_time', models.DateTimeField(blank=True, help_text="Test shu vaqtdan boshlab talabalarga ko'rinadi.", null=True, verbose_name='Boshlanish vaqti')),
                ('end_time', models.DateTimeField(blank=True, help_text='Test shu vaqtdan keyin yopiladi.', null=True, verbose_name='Tugash vaqti')),
                ('status', models.CharField(choices=[('draft', 'Qoralama'), ('processing', 'Fayl qayta ishlanmoqda'), ('active', 'Aktiv'), ('completed', 'Yakunlangan'), ('archived', 'Arxivlangan')], db_index=True, default='draft', max_length=20, verbose_name='Test holati')),
                ('allowed_ips', models.JSONField(blank=True, default=list, help_text="Testni faqat shu IP manzillardan topshirish mumkin. Bo'sh qoldirilsa - cheklov yo'q.", verbose_name='Ruxsat etilgan IP manzillar')),
                ('randomize_questions', models.BooleanField(default=True, help_text="Belgilansa, har bir talabaga savollar tasodifiy tartibda ko'rsatiladi.", verbose_name='Savollarni aralashtirish')),
                ('allow_once', models.BooleanField(default=True, help_text='Belgilansa, talaba testni faqat bir marta yecha oladi.', verbose_name='Faqat bir marta topshirish')),
                ('source_file', models.FileField(blank=True, help_text='Savollar yuklangan original .txt fayli.', null=True, upload_to=auth_app.models.test_source_file_path, verbose_name='Test manba fayli (.txt)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Yaratilgan sana')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Yangilangan sana')),
                ('creator', models.ForeignKey(blank=True, help_text="Testni yaratgan o'qituvchi yoki ma'mur.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tests', to=settings.AUTH_USER_MODEL, verbose_name='Test yaratuvchisi')),
                ('faculties', models.ManyToManyField(blank=True, help_text="Test faqat tanlangan fakultet talabalari uchun ochiq bo'ladi.", to='auth_app.faculty', verbose_name='Ruxsat etilgan fakultetlar')),
                ('groups', models.ManyToManyField(blank=True, help_text="Test faqat tanlangan guruh talabalari uchun ochiq bo'ladi.", to='auth_app.group', verbose_name='Ruxsat etilgan guruhlar')),
                ('specialties', models.ManyToManyField(blank=True, help_text="Test faqat tanlangan yo'nalish talabalari uchun ochiq bo'ladi.", to='auth_app.specialty', verbose_name="Ruxsat etilgan yo'nalishlar")),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Testlar',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Boshlangan vaqti')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='Tugagan vaqti')),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name="To'plangan ball")),
                ('is_completed', models.BooleanField(default=False, verbose_name='Yakunlanganmi?')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_responses', to='auth_app.student', verbose_name='Talaba')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='auth_app.test', verbose_name='Test')),
            ],
            options={
                'verbose_name': 'Test Natijasi',
                'verbose_name_plural': 'Test Natijalari',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chosen_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_selections', to='auth_app.answer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='auth_app.question')),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='auth_app.surveyresponse', verbose_name='Test urinishi')),
            ],
            options={
                'verbose_name': 'Talaba javobi',
                'verbose_name_plural': 'Talaba javoblari',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='auth_app.test', verbose_name='Test'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='auth_app.question', verbose_name='Savol'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['status', 'start_time', 'end_time'], name='auth_app_te_status_14a976_idx'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['creator'], name='auth_app_te_creator_d37460_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='test',
            unique_together={('title', 'creator')},
        ),
        migrations.AlterUniqueTogether(
            name='surveyresponse',
            unique_together={('student', 'test')},
        ),
        migrations.AlterUniqueTogether(
            name='studentanswer',
            unique_together={('response', 'question')},
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('test', 'text')},
        ),
    ]
